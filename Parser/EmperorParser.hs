{-# OPTIONS_GHC -w #-}
{-# OPTIONS -XMagicHash -XBangPatterns -XTypeSynonymInstances -XFlexibleInstances -cpp #-}
#if __GLASGOW_HASKELL__ >= 710
{-# OPTIONS_GHC -XPartialTypeSignatures #-}
#endif
{-|
Module      : EmperorParser
Description : Parser for the emperor language
Copyright   : (c) Edward Jones, 2019
License     : GPL-3
Maintainer  : Edward Jones
Stability   : experimental
Portability : POSIX
Language    : Haskell2010

This module defines the machinery to parse the Emperor language from a token stream generated by the Emperor lexer.
-}
module Parser.EmperorParser (parseEmperor, parseREPL) where

import Parser.AST (AST(..), ModuleHeader(..), Import(..), ImportLocation(..), ImportType(..), Ident(..), ModuleItem(..), FunctionDef(..), FunctionTypeDef(..), TypeComparison(..), BodyBlock(..), SwitchCase(..), BodyLine(..), Assignment(..), Queue(..), Expr(..), Value(..), Call(..))
import Parser.EmperorLexer (Alex, AlexPosn(..), Token(..), lexWrap, alexError, runAlex)
import Types.Results (EmperorType(..), Purity(..))
import qualified Data.Array as Emperorparser_Data_Array
import qualified Data.Bits as Bits
import qualified GHC.Exts as Emperorparser_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Emperorparser Version 1.19.8

data EmperorparserAbsSyn t39 t40 t41
	= EmperorparserTerminal (Token)
	| EmperorparserErrorToken Int
	| EmperorparserAbsSyn5 (AST)
	| EmperorparserAbsSyn6 (ModuleHeader)
	| EmperorparserAbsSyn7 ([Import])
	| EmperorparserAbsSyn8 (Import)
	| EmperorparserAbsSyn9 (ImportLocation)
	| EmperorparserAbsSyn10 ([Ident])
	| EmperorparserAbsSyn11 ([ModuleItem])
	| EmperorparserAbsSyn12 (ModuleItem)
	| EmperorparserAbsSyn14 ([FunctionDef])
	| EmperorparserAbsSyn16 ([FunctionTypeDef])
	| EmperorparserAbsSyn17 (FunctionDef)
	| EmperorparserAbsSyn18 (FunctionTypeDef)
	| EmperorparserAbsSyn20 ([TypeComparison])
	| EmperorparserAbsSyn21 (TypeComparison)
	| EmperorparserAbsSyn22 ([BodyBlock])
	| EmperorparserAbsSyn23 (BodyBlock)
	| EmperorparserAbsSyn24 ([SwitchCase])
	| EmperorparserAbsSyn25 (SwitchCase)
	| EmperorparserAbsSyn26 (BodyLine)
	| EmperorparserAbsSyn27 (Assignment)
	| EmperorparserAbsSyn28 (Queue)
	| EmperorparserAbsSyn29 (EmperorType)
	| EmperorparserAbsSyn30 ([EmperorType])
	| EmperorparserAbsSyn32 (Expr)
	| EmperorparserAbsSyn33 (Value)
	| EmperorparserAbsSyn34 (Call)
	| EmperorparserAbsSyn37 ([Expr])
	| EmperorparserAbsSyn39 t39
	| EmperorparserAbsSyn40 t40
	| EmperorparserAbsSyn41 t41

emperorparserExpList :: EmperorparserAddr
emperorparserExpList = EmperorparserA# "\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x40\xfc\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x00\xf1\x07\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x00\xc4\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x10\x7f\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x40\xfc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x00\xf1\x07\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x00\xc4\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\xa0\x02\x00\x00\xf1\x07\x04\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x40\xfc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xf4\x81\x0a\x00\x00\xc4\x1f\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x40\xfc\x01\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x2a\x00\x00\x10\x7f\x00\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xdf\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x7f\xff\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xdf\x3f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x7f\xff\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xfd\x13\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\x00\x7d\xa0\x02\x00\x00\xf1\x07\x04\x00\x00\x00\x00\x00\xf4\x81\x0a\x00\x00\xc4\x1f\x10\x00\x00\x00\x00\x00\xd0\x07\x2a\x00\x00\x10\x7f\x40\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\xa0\x02\x00\x00\xf1\x07\x04\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x80\x0f\x20\x2a\x01\x08\x10\x00\x20\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xf7\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x80\xa8\x04\x20\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\xa2\x12\x80\x00\x01\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xf7\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x20\xe0\xff\xfd\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x7f\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x81\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x07\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x3f\xf8\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xf3\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xc3\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x2f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x1f\xf8\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xf7\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xdf\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\xa0\x02\x00\x00\xf1\x07\x04\x00\x00\x00\x00\xe0\x03\x88\x4a\x00\x02\x04\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x1f\xa8\x00\x00\x40\xfc\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x07\x2a\x00\x00\x10\x7f\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

{-# NOINLINE emperorparserExpListPerState #-}
emperorparserExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_parseEmperor","%start_parseREPL","ast","moduleHeader","usings","using","usingLabel","identList","moduleBody","moduleItem","component","functionDefs","typeClass","memberTypes","functionDef","functionTypeDef","functionParamDef","typeComparisons","typeComparison","body","bodyBlock","switchBody","switchCase","bodyLine","assignment","queue","typedef","tupleTypeDef","nonTupleTypeDef","expr","value","call","impureCall","pureCall","exprList","exprListNonZero","maybe__expr__","maybe__typeComparisons__","maybe__typedef__","INT","BOOL","REAL","CHAR","STRING","\"if\"","\"else\"","\"while\"","\"repeat\"","\"with\"","\"switch\"","\"for\"","\"import\"","\"module\"","IDENT","\"<-\"","\"->\"","\"=\"","\"(\"","\")\"","\"[\"","\"]\"","\"{\"","\"}\"","\"+\"","\"-\"","\"/\"","\"%\"","\"*\"","\"<<\"","\">>\"","\">>>\"","\"&\"","\"&&\"","\"|\"","\"||\"","\"!\"","\"^\"","\"<\"","\"<=\"","\">\"","\">=\"","\"=>\"","\"==\"","\"!=\"","\"@\"","\",\"","\":\"","\";\"","\"int\"","\"bool\"","\"real\"","\"char\"","\"string\"","\"()\"","\"Any\"","\"<:\"","\"<~\"","\"::\"","\"class\"","\"component\"","\"#\"","\"_\"","\"return\"","%eof"]
        bit_start = st * 106
        bit_end = (st + 1) * 106
        read_bit = readArrayBit emperorparserExpList
        bits = map read_bit [bit_start..bit_end - 1]
        bits_indexed = zip bits [0..105]
        token_strs_expected = concatMap f bits_indexed
        f (False, _) = []
        f (True, nr) = [token_strs !! nr]

emperorparserActOffsets :: EmperorparserAddr
emperorparserActOffsets = EmperorparserA# "\xf3\xff\x14\x00\xf3\xff\x0d\x00\x1f\x00\xeb\xff\x00\x00\x00\x00\x00\x00\x69\x00\x17\x00\x36\x00\x38\x00\x44\x00\x79\x00\x79\x00\x40\x00\xbb\x00\xa2\x00\x14\x00\xa3\x00\x0a\x00\xcf\x00\x00\x00\xdc\x00\xdf\x00\x00\x00\x14\x00\x00\x00\xeb\x00\xf2\x00\x00\x00\xe7\x00\x40\x00\x40\x00\x40\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\xf9\x00\x0c\x01\x0d\x01\x2f\x01\x16\x01\x44\x01\x5a\x01\x41\x01\x0c\x00\x3e\x00\x54\x00\x40\x00\x40\x00\x38\x01\x94\x01\x00\x00\x00\x00\x7c\x01\x9e\x01\xa6\x01\x84\x01\x00\x00\x00\x00\x16\x00\xab\x01\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x8c\x01\xb3\x01\xbd\x01\x9c\x01\xc3\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\x01\xa0\x01\x02\x00\xae\x01\x00\x00\x00\x00\xcb\x01\x00\x00\xd3\x01\x01\x00\x01\x00\x01\x00\x40\x00\x01\x00\xe0\x01\x2c\x00\x01\x00\xe3\x01\x00\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\x01\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xf0\x01\x00\x00\xeb\x01\xfe\x01\x75\x00\xee\x01\xf3\x01\x8d\x00\xa5\x00\xbd\x00\xf7\xff\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x16\x00\x16\x00\x16\x00\xfd\x01\x16\x00\x01\x00\x01\x00\x01\x00\x00\x00\x00\x00\xed\x00\xfa\x01\x00\x00\x09\x02\x0e\x02\x01\x00\x1e\x02\x00\x00\x00\x00\x00\x00\x01\x00\x2e\x02\xd5\x00\x01\x02\x13\x02\x60\x00\x24\x02\x37\x02\x38\x02\x45\x02\x2b\x02\x2b\x02\x82\x01\x4f\x02\x4f\x02\x4f\x02\x4f\x02\x58\x01\x19\x01\x43\x01\x2e\x01\x6d\x01\x61\x01\x61\x01\x61\x01\x00\x00\x00\x00\x00\x00\x21\x00\x21\x00\x04\x01\x04\x01\x1d\x02\x00\x00\x00\x00\x00\x00\x16\x00\x01\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x62\x02\x00\x00\x00\x00\x16\x00\x66\x02\x00\x00\x00\x00\x00\x00"#

emperorparserGotoOffsets :: EmperorparserAddr
emperorparserGotoOffsets = EmperorparserA# "\x12\x00\x9b\x02\xa5\x02\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\x00\x49\x00\x43\x00\x00\x00\x00\x00\x63\x00\x00\x00\x4c\x02\x00\x00\x00\x00\x00\x00\xa1\x00\x00\x00\x34\x02\x00\x00\x25\x03\x00\x00\x00\x00\x00\x00\x4d\x01\xd2\x01\xe2\x01\xf2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\x01\x00\x00\x1a\x00\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x12\x02\x00\x00\x26\x03\x00\x00\x00\x00\x00\x00\x30\x03\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x02\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\xc2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaf\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x73\x01\x42\x02\x8e\x02\x8e\x01\x93\x02\x00\x00\x18\x03\x55\x02\x31\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x02\x64\x02\x6b\x02\x98\x02\x9d\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa2\x02\xa7\x02\xac\x02\xb1\x02\xb6\x02\xbb\x02\xc0\x02\xc5\x02\xca\x02\xcf\x02\xd4\x02\xd9\x02\xde\x02\xe3\x02\xe8\x02\xed\x02\xf2\x02\xf7\x02\xfc\x02\x01\x03\x06\x03\x0b\x03\xbf\x01\xcf\x01\xdf\x01\x00\x00\xef\x01\x3b\x02\x10\x03\x72\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x79\x02\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x02\x48\x02\x00\x00\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x02\x00\x00\x00\x00\x00\x00\x00\x00"#

emperorparserAdjustOffset :: Emperorparser_GHC_Exts.Int# -> Emperorparser_GHC_Exts.Int#
emperorparserAdjustOffset off = off

emperorparserDefActions :: EmperorparserAddr
emperorparserDefActions = EmperorparserA# "\x00\x00\x00\x00\x00\x00\xfb\xff\x00\x00\x00\x00\xf1\xff\xf0\xff\xef\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\xff\x93\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf9\xff\xf6\xff\x00\x00\xfb\xff\xfd\xff\xf3\xff\xfc\xff\xe6\xff\xe7\xff\xce\xff\xcd\xff\x00\x00\x00\x00\x00\x00\x00\x00\xcb\xff\xca\xff\xc9\xff\xc8\xff\xc7\xff\xc6\xff\xc5\xff\x92\xff\xe4\xff\x00\x00\x00\x00\x00\x00\xed\xff\xe2\xff\xea\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\xff\xf2\xff\xfa\xff\x00\x00\x00\x00\x00\x00\xf5\xff\xf7\xff\xe5\xff\x91\xff\xc3\xff\x00\x00\xcc\xff\xc4\xff\xc1\xff\xc0\xff\x00\x00\xe3\xff\x00\x00\xea\xff\x00\x00\x00\x00\xed\xff\xec\xff\xee\xff\xe1\xff\xe9\xff\xeb\xff\xc2\xff\x00\x00\xe0\xff\x00\x00\xd4\xff\xd3\xff\x90\xff\xd2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x91\xff\x00\x00\x00\x00\x00\x00\x95\xff\x00\x00\xf8\xff\xf4\xff\x94\xff\xbf\xff\x9e\xff\x9d\xff\x9c\xff\xd1\xff\xa4\xff\xa0\xff\xa3\xff\xa1\xff\x9f\xff\xa2\xff\x99\xff\x99\xff\x99\xff\x00\x00\x00\x00\x00\x00\xa5\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xff\xdf\xff\xe8\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\xff\x91\xff\x91\xff\x00\x00\x91\xff\xd7\xff\x00\x00\x99\xff\xbe\xff\xbd\xff\x97\xff\x00\x00\x98\xff\x00\x00\x00\x00\x99\xff\x00\x00\xa7\xff\xa6\xff\xa8\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xff\xb3\xff\xad\xff\xb4\xff\xb5\xff\xb6\xff\xb7\xff\xac\xff\xae\xff\xaf\xff\xb0\xff\xb1\xff\xa9\xff\xaa\xff\xab\xff\xba\xff\xb8\xff\xb9\xff\xbb\xff\xbc\xff\xd0\xff\xcf\xff\x00\x00\xdc\xff\xda\xff\xd9\xff\x91\xff\xd7\xff\xd8\xff\x91\xff\x9b\xff\x96\xff\x9a\xff\x00\x00\xd6\xff\xd5\xff\x91\xff\x00\x00\xdb\xff\xdd\xff"#

emperorparserCheck :: EmperorparserAddr
emperorparserCheck = EmperorparserA# "\xff\xff\x0e\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x10\x00\x06\x00\x12\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x05\x00\x0f\x00\x0f\x00\x00\x00\x01\x00\x13\x00\x13\x00\x15\x00\x15\x00\x17\x00\x17\x00\x0d\x00\x1a\x00\x06\x00\x11\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0f\x00\x18\x00\x0b\x00\x25\x00\x0d\x00\x0b\x00\x13\x00\x0d\x00\x15\x00\x41\x00\x17\x00\x0f\x00\x2e\x00\x2e\x00\x27\x00\x0f\x00\x10\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x0f\x00\x1b\x00\x1c\x00\x1d\x00\x13\x00\x3f\x00\x15\x00\x40\x00\x17\x00\x2e\x00\x0f\x00\x23\x00\x0f\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x11\x00\x3c\x00\x3d\x00\x3b\x00\x13\x00\x16\x00\x15\x00\x40\x00\x17\x00\x0f\x00\x10\x00\x2e\x00\x18\x00\x19\x00\x1a\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x11\x00\x02\x00\x03\x00\x14\x00\x06\x00\x07\x00\x08\x00\x23\x00\x0a\x00\x2e\x00\x0c\x00\x0d\x00\x11\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x41\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x31\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x02\x00\x03\x00\x30\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x39\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x0f\x00\x10\x00\x30\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x0f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x31\x00\x31\x00\x30\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x13\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x0f\x00\x0d\x00\x30\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x0f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x11\x00\x1d\x00\x30\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x2f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x0f\x00\x2f\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x30\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x30\x00\x0f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x3a\x00\x23\x00\x11\x00\x0f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x18\x00\x19\x00\x1a\x00\x30\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x39\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x0f\x00\x16\x00\x29\x00\x18\x00\x19\x00\x1a\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x0f\x00\x2c\x00\x2d\x00\x11\x00\x12\x00\x24\x00\x2f\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x14\x00\x09\x00\x11\x00\x1e\x00\x0c\x00\x0d\x00\x11\x00\x12\x00\x0f\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x3e\x00\x09\x00\x0f\x00\x1e\x00\x0c\x00\x0d\x00\x11\x00\x12\x00\x0f\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x3e\x00\x11\x00\x11\x00\x1e\x00\x3e\x00\x31\x00\x11\x00\x12\x00\x0f\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x18\x00\x19\x00\x1a\x00\x1e\x00\x13\x00\x0f\x00\x11\x00\x12\x00\x0f\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x18\x00\x19\x00\x1a\x00\x1e\x00\x13\x00\x0f\x00\x11\x00\x12\x00\x0f\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x18\x00\x19\x00\x1a\x00\x1e\x00\x10\x00\x12\x00\x11\x00\x12\x00\x18\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x18\x00\x19\x00\x1a\x00\x1e\x00\x30\x00\x16\x00\x11\x00\x12\x00\x14\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x18\x00\x19\x00\x1a\x00\x1e\x00\x18\x00\x19\x00\x1a\x00\x12\x00\x14\x00\x24\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x06\x00\x07\x00\x08\x00\x1e\x00\x0a\x00\x3e\x00\x0c\x00\x0d\x00\x14\x00\x24\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x07\x00\x30\x00\x13\x00\x14\x00\x04\x00\x3e\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x13\x00\x14\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x3e\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x3e\x00\x3e\x00\x22\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x3e\x00\x21\x00\x07\x00\x08\x00\x3e\x00\x0a\x00\x01\x00\x0c\x00\x0d\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x18\x00\x19\x00\x1a\x00\x0e\x00\x0e\x00\x05\x00\x05\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

emperorparserTable :: EmperorparserAddr
emperorparserTable = EmperorparserA# "\x00\x00\x05\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x8c\x00\x62\x00\x8d\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x18\x00\x78\x00\x91\xff\x0d\x00\x03\x00\x79\x00\x22\x00\x7a\x00\x23\x00\x7b\x00\x24\x00\x16\x00\x7c\x00\x62\x00\x3b\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x0b\x00\x4c\x00\x4e\x00\x7d\x00\x4f\x00\x56\x00\x22\x00\x4f\x00\x23\x00\xff\xff\x24\x00\x13\x00\x7e\x00\x68\x00\x19\x00\x2c\x00\x2d\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x80\x00\x90\x00\x91\x00\x92\x00\x22\x00\x7f\x00\x23\x00\x69\x00\x24\x00\x68\x00\x10\x00\x30\x00\x0f\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x3b\x00\x0c\x00\x0d\x00\x11\x00\x22\x00\x4b\x00\x23\x00\x69\x00\x24\x00\x2c\x00\x2d\x00\x25\x00\x1e\x00\x1f\x00\x20\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x3b\x00\x13\x00\x14\x00\x4a\x00\x1a\x00\x1b\x00\x06\x00\x2e\x00\x07\x00\x25\x00\x08\x00\x09\x00\xda\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\xff\xff\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x12\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x3e\x00\x14\x00\xa7\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x30\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x4d\x00\x2d\x00\xa4\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x1e\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x1d\x00\x1a\x00\xa3\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x41\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x40\x00\x16\x00\xa2\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x3d\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x3b\x00\x3a\x00\xdd\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x35\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x33\x00\xb6\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x99\x00\x34\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x97\x00\x98\x00\x32\x00\x0b\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x51\x00\x98\x00\x4d\x00\x0b\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x38\x00\x1f\x00\x20\x00\x46\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x86\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x30\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x3d\x00\x82\x00\x44\x00\x5e\x00\x1f\x00\x20\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x43\x00\xa0\x00\xa1\x00\x59\x00\x5a\x00\x83\x00\x6a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x6b\x00\x51\x00\x3b\x00\x5f\x00\x52\x00\x09\x00\x89\x00\x5a\x00\x0b\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x58\x00\x53\x00\x56\x00\x5f\x00\x52\x00\x09\x00\xbe\x00\x5a\x00\x0b\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x55\x00\x3b\x00\x3b\x00\x5f\x00\x8b\x00\x89\x00\xbd\x00\x5a\x00\x88\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x37\x00\x1f\x00\x20\x00\x5f\x00\xb1\x00\x81\x00\xbc\x00\x5a\x00\x43\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x36\x00\x1f\x00\x20\x00\x5f\x00\xa9\x00\x80\x00\xbb\x00\x5a\x00\xa5\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x35\x00\x1f\x00\x20\x00\x5f\x00\xa8\x00\x8d\x00\xe0\x00\x5a\x00\xb5\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x47\x00\x48\x00\x20\x00\x5f\x00\xa6\x00\xb4\x00\xe4\x00\x5a\x00\xb3\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x46\x00\x1f\x00\x20\x00\x5f\x00\x58\x00\x1f\x00\x20\x00\xe2\x00\xe0\x00\x60\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x1f\x00\x20\x00\x3d\x00\x1b\x00\x06\x00\x5f\x00\x07\x00\xdc\x00\x08\x00\x09\x00\xde\x00\x60\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xd6\x00\xe4\x00\xb8\x00\xb9\x00\x16\x00\xdb\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\xba\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xe1\x00\xb9\x00\x85\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd9\x00\xba\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd8\x00\xd7\x00\x71\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xaf\x00\xad\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xae\x00\xad\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xac\x00\xad\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xb6\x00\xad\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xb1\x00\xad\x00\xab\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xe6\x00\xde\x00\x05\x00\x06\x00\xe7\x00\x07\x00\x03\x00\x08\x00\x09\x00\x84\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x81\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xaa\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xa9\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd4\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd3\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd2\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd1\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xd0\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xcf\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xce\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xcd\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xcc\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xcb\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xca\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc9\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc8\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc7\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc6\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc5\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc4\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc3\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc2\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc1\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xc0\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xbf\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xb7\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x35\x00\x1f\x00\x20\x00\x3b\x00\x44\x00\x41\x00\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

emperorparserReduceArr = Emperorparser_Data_Array.array (2, 111) [
	(2 , emperorparserReduce_2),
	(3 , emperorparserReduce_3),
	(4 , emperorparserReduce_4),
	(5 , emperorparserReduce_5),
	(6 , emperorparserReduce_6),
	(7 , emperorparserReduce_7),
	(8 , emperorparserReduce_8),
	(9 , emperorparserReduce_9),
	(10 , emperorparserReduce_10),
	(11 , emperorparserReduce_11),
	(12 , emperorparserReduce_12),
	(13 , emperorparserReduce_13),
	(14 , emperorparserReduce_14),
	(15 , emperorparserReduce_15),
	(16 , emperorparserReduce_16),
	(17 , emperorparserReduce_17),
	(18 , emperorparserReduce_18),
	(19 , emperorparserReduce_19),
	(20 , emperorparserReduce_20),
	(21 , emperorparserReduce_21),
	(22 , emperorparserReduce_22),
	(23 , emperorparserReduce_23),
	(24 , emperorparserReduce_24),
	(25 , emperorparserReduce_25),
	(26 , emperorparserReduce_26),
	(27 , emperorparserReduce_27),
	(28 , emperorparserReduce_28),
	(29 , emperorparserReduce_29),
	(30 , emperorparserReduce_30),
	(31 , emperorparserReduce_31),
	(32 , emperorparserReduce_32),
	(33 , emperorparserReduce_33),
	(34 , emperorparserReduce_34),
	(35 , emperorparserReduce_35),
	(36 , emperorparserReduce_36),
	(37 , emperorparserReduce_37),
	(38 , emperorparserReduce_38),
	(39 , emperorparserReduce_39),
	(40 , emperorparserReduce_40),
	(41 , emperorparserReduce_41),
	(42 , emperorparserReduce_42),
	(43 , emperorparserReduce_43),
	(44 , emperorparserReduce_44),
	(45 , emperorparserReduce_45),
	(46 , emperorparserReduce_46),
	(47 , emperorparserReduce_47),
	(48 , emperorparserReduce_48),
	(49 , emperorparserReduce_49),
	(50 , emperorparserReduce_50),
	(51 , emperorparserReduce_51),
	(52 , emperorparserReduce_52),
	(53 , emperorparserReduce_53),
	(54 , emperorparserReduce_54),
	(55 , emperorparserReduce_55),
	(56 , emperorparserReduce_56),
	(57 , emperorparserReduce_57),
	(58 , emperorparserReduce_58),
	(59 , emperorparserReduce_59),
	(60 , emperorparserReduce_60),
	(61 , emperorparserReduce_61),
	(62 , emperorparserReduce_62),
	(63 , emperorparserReduce_63),
	(64 , emperorparserReduce_64),
	(65 , emperorparserReduce_65),
	(66 , emperorparserReduce_66),
	(67 , emperorparserReduce_67),
	(68 , emperorparserReduce_68),
	(69 , emperorparserReduce_69),
	(70 , emperorparserReduce_70),
	(71 , emperorparserReduce_71),
	(72 , emperorparserReduce_72),
	(73 , emperorparserReduce_73),
	(74 , emperorparserReduce_74),
	(75 , emperorparserReduce_75),
	(76 , emperorparserReduce_76),
	(77 , emperorparserReduce_77),
	(78 , emperorparserReduce_78),
	(79 , emperorparserReduce_79),
	(80 , emperorparserReduce_80),
	(81 , emperorparserReduce_81),
	(82 , emperorparserReduce_82),
	(83 , emperorparserReduce_83),
	(84 , emperorparserReduce_84),
	(85 , emperorparserReduce_85),
	(86 , emperorparserReduce_86),
	(87 , emperorparserReduce_87),
	(88 , emperorparserReduce_88),
	(89 , emperorparserReduce_89),
	(90 , emperorparserReduce_90),
	(91 , emperorparserReduce_91),
	(92 , emperorparserReduce_92),
	(93 , emperorparserReduce_93),
	(94 , emperorparserReduce_94),
	(95 , emperorparserReduce_95),
	(96 , emperorparserReduce_96),
	(97 , emperorparserReduce_97),
	(98 , emperorparserReduce_98),
	(99 , emperorparserReduce_99),
	(100 , emperorparserReduce_100),
	(101 , emperorparserReduce_101),
	(102 , emperorparserReduce_102),
	(103 , emperorparserReduce_103),
	(104 , emperorparserReduce_104),
	(105 , emperorparserReduce_105),
	(106 , emperorparserReduce_106),
	(107 , emperorparserReduce_107),
	(108 , emperorparserReduce_108),
	(109 , emperorparserReduce_109),
	(110 , emperorparserReduce_110),
	(111 , emperorparserReduce_111)
	]

emperorparser_n_terms = 66 :: Int
emperorparser_n_nonterms = 37 :: Int

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_2 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_2 = emperorparserSpecReduce_3  0# emperorparserReduction_2
emperorparserReduction_2 (EmperorparserAbsSyn11  emperorparser_var_3)
	(EmperorparserAbsSyn7  emperorparser_var_2)
	(EmperorparserAbsSyn6  emperorparser_var_1)
	 =  EmperorparserAbsSyn5
		 (AST emperorparser_var_1 emperorparser_var_2 emperorparser_var_3
	)
emperorparserReduction_2 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_3 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_3 = emperorparserSpecReduce_3  1# emperorparserReduction_3
emperorparserReduction_3 _
	(EmperorparserTerminal emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn6
		 (Module (Ident (identifierVal emperorparser_var_2))
	)
emperorparserReduction_3 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_4 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_4 = emperorparserSpecReduce_0  2# emperorparserReduction_4
emperorparserReduction_4  =  EmperorparserAbsSyn7
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_5 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_5 = emperorparserSpecReduce_3  2# emperorparserReduction_5
emperorparserReduction_5 (EmperorparserAbsSyn7  emperorparser_var_3)
	_
	(EmperorparserAbsSyn8  emperorparser_var_1)
	 =  EmperorparserAbsSyn7
		 (emperorparser_var_1 : emperorparser_var_3
	)
emperorparserReduction_5 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_6 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_6 = emperorparserSpecReduce_2  3# emperorparserReduction_6
emperorparserReduction_6 (EmperorparserAbsSyn9  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn8
		 (Import emperorparser_var_2 Nothing
	)
emperorparserReduction_6 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_7 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_7 = emperorparserReduce 5# 3# emperorparserReduction_7
emperorparserReduction_7 (_ `EmperorparserStk`
	(EmperorparserAbsSyn10  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn9  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn8
		 (Import emperorparser_var_2 (Just emperorparser_var_4)
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_8 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_8 = emperorparserSpecReduce_3  4# emperorparserReduction_8
emperorparserReduction_8 _
	(EmperorparserTerminal emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn9
		 (ImportLocation Global (Ident (identifierVal emperorparser_var_2))
	)
emperorparserReduction_8 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_9 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_9 = emperorparserSpecReduce_1  4# emperorparserReduction_9
emperorparserReduction_9 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn9
		 (ImportLocation Local (Ident (stringVal emperorparser_var_1))
	)
emperorparserReduction_9 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_10 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_10 = emperorparserSpecReduce_1  5# emperorparserReduction_10
emperorparserReduction_10 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn10
		 ([Ident (identifierVal emperorparser_var_1)]
	)
emperorparserReduction_10 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_11 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_11 = emperorparserSpecReduce_3  5# emperorparserReduction_11
emperorparserReduction_11 (EmperorparserAbsSyn10  emperorparser_var_3)
	_
	(EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn10
		 (Ident (identifierVal emperorparser_var_1) : emperorparser_var_3
	)
emperorparserReduction_11 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_12 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_12 = emperorparserSpecReduce_1  6# emperorparserReduction_12
emperorparserReduction_12 (EmperorparserAbsSyn12  emperorparser_var_1)
	 =  EmperorparserAbsSyn11
		 ([emperorparser_var_1]
	)
emperorparserReduction_12 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_13 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_13 = emperorparserSpecReduce_2  6# emperorparserReduction_13
emperorparserReduction_13 (EmperorparserAbsSyn11  emperorparser_var_2)
	(EmperorparserAbsSyn12  emperorparser_var_1)
	 =  EmperorparserAbsSyn11
		 (emperorparser_var_1 : emperorparser_var_2
	)
emperorparserReduction_13 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_14 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_14 = emperorparserSpecReduce_1  7# emperorparserReduction_14
emperorparserReduction_14 (EmperorparserAbsSyn12  emperorparser_var_1)
	 =  EmperorparserAbsSyn12
		 (emperorparser_var_1
	)
emperorparserReduction_14 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_15 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_15 = emperorparserSpecReduce_1  7# emperorparserReduction_15
emperorparserReduction_15 (EmperorparserAbsSyn12  emperorparser_var_1)
	 =  EmperorparserAbsSyn12
		 (emperorparser_var_1
	)
emperorparserReduction_15 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_16 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_16 = emperorparserSpecReduce_1  7# emperorparserReduction_16
emperorparserReduction_16 (EmperorparserAbsSyn17  emperorparser_var_1)
	 =  EmperorparserAbsSyn12
		 (FunctionItem emperorparser_var_1
	)
emperorparserReduction_16 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_17 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_17 = emperorparserReduce 6# 8# emperorparserReduction_17
emperorparserReduction_17 (_ `EmperorparserStk`
	(EmperorparserAbsSyn14  emperorparser_var_5) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn40  emperorparser_var_3) `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn12
		 (Component (Ident (identifierVal emperorparser_var_2)) emperorparser_var_3 emperorparser_var_5
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_18 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_18 = emperorparserSpecReduce_0  9# emperorparserReduction_18
emperorparserReduction_18  =  EmperorparserAbsSyn14
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_19 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_19 = emperorparserSpecReduce_2  9# emperorparserReduction_19
emperorparserReduction_19 (EmperorparserAbsSyn14  emperorparser_var_2)
	(EmperorparserAbsSyn17  emperorparser_var_1)
	 =  EmperorparserAbsSyn14
		 (emperorparser_var_1 : emperorparser_var_2
	)
emperorparserReduction_19 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_20 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_20 = emperorparserReduce 6# 10# emperorparserReduction_20
emperorparserReduction_20 (_ `EmperorparserStk`
	(EmperorparserAbsSyn16  emperorparser_var_5) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn40  emperorparser_var_3) `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn12
		 (TypeClass (Ident (identifierVal emperorparser_var_2)) emperorparser_var_3 emperorparser_var_5
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_21 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_21 = emperorparserSpecReduce_0  11# emperorparserReduction_21
emperorparserReduction_21  =  EmperorparserAbsSyn16
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_22 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_22 = emperorparserSpecReduce_2  11# emperorparserReduction_22
emperorparserReduction_22 (EmperorparserAbsSyn16  emperorparser_var_2)
	(EmperorparserAbsSyn18  emperorparser_var_1)
	 =  EmperorparserAbsSyn16
		 (emperorparser_var_1 : emperorparser_var_2
	)
emperorparserReduction_22 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_23 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_23 = emperorparserReduce 7# 12# emperorparserReduction_23
emperorparserReduction_23 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_6) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn10  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn18  emperorparser_var_1) `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn17
		 (FunctionDef emperorparser_var_1 emperorparser_var_4 emperorparser_var_6
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_24 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_24 = emperorparserSpecReduce_3  13# emperorparserReduction_24
emperorparserReduction_24 (EmperorparserAbsSyn29  emperorparser_var_3)
	_
	(EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn18
		 (FunctionTypeDef (Ident (identifierVal emperorparser_var_1)) emperorparser_var_3
	)
emperorparserReduction_24 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_25 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_25 = emperorparserSpecReduce_0  14# emperorparserReduction_25
emperorparserReduction_25  =  EmperorparserAbsSyn10
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_26 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_26 = emperorparserSpecReduce_2  14# emperorparserReduction_26
emperorparserReduction_26 (EmperorparserAbsSyn10  emperorparser_var_2)
	(EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn10
		 ((Ident (identifierVal emperorparser_var_1)) : emperorparser_var_2
	)
emperorparserReduction_26 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_27 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_27 = emperorparserSpecReduce_1  15# emperorparserReduction_27
emperorparserReduction_27 (EmperorparserAbsSyn21  emperorparser_var_1)
	 =  EmperorparserAbsSyn20
		 ([emperorparser_var_1]
	)
emperorparserReduction_27 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_28 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_28 = emperorparserSpecReduce_3  15# emperorparserReduction_28
emperorparserReduction_28 (EmperorparserAbsSyn20  emperorparser_var_3)
	_
	(EmperorparserAbsSyn21  emperorparser_var_1)
	 =  EmperorparserAbsSyn20
		 (emperorparser_var_1 : emperorparser_var_3
	)
emperorparserReduction_28 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_29 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_29 = emperorparserSpecReduce_2  16# emperorparserReduction_29
emperorparserReduction_29 (EmperorparserTerminal emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn21
		 (IsSubType (Ident (identifierVal emperorparser_var_2))
	)
emperorparserReduction_29 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_30 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_30 = emperorparserReduce 4# 16# emperorparserReduction_30
emperorparserReduction_30 ((EmperorparserTerminal emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn21
		 (IsSubTypeWithImplementor (Ident (identifierVal emperorparser_var_2)) (Ident (identifierVal emperorparser_var_4))
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_31 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_31 = emperorparserSpecReduce_1  17# emperorparserReduction_31
emperorparserReduction_31 (EmperorparserAbsSyn23  emperorparser_var_1)
	 =  EmperorparserAbsSyn22
		 ([emperorparser_var_1]
	)
emperorparserReduction_31 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_32 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_32 = emperorparserSpecReduce_2  17# emperorparserReduction_32
emperorparserReduction_32 (EmperorparserAbsSyn22  emperorparser_var_2)
	(EmperorparserAbsSyn23  emperorparser_var_1)
	 =  EmperorparserAbsSyn22
		 (emperorparser_var_1 : emperorparser_var_2
	)
emperorparserReduction_32 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_33 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_33 = emperorparserSpecReduce_2  18# emperorparserReduction_33
emperorparserReduction_33 _
	(EmperorparserAbsSyn26  emperorparser_var_1)
	 =  EmperorparserAbsSyn23
		 (Line emperorparser_var_1
	)
emperorparserReduction_33 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_34 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_34 = emperorparserReduce 8# 18# emperorparserReduction_34
emperorparserReduction_34 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_7) `EmperorparserStk`
	_ `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn32  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (IfElse emperorparser_var_2 emperorparser_var_4 emperorparser_var_7
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_35 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_35 = emperorparserReduce 5# 18# emperorparserReduction_35
emperorparserReduction_35 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn32  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (While emperorparser_var_2 emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_36 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_36 = emperorparserReduce 7# 18# emperorparserReduction_36
emperorparserReduction_36 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_6) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn32  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (For (Ident (identifierVal emperorparser_var_2)) emperorparser_var_4 emperorparser_var_6
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_37 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_37 = emperorparserReduce 5# 18# emperorparserReduction_37
emperorparserReduction_37 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn32  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (Repeat emperorparser_var_2 emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_38 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_38 = emperorparserReduce 5# 18# emperorparserReduction_38
emperorparserReduction_38 (_ `EmperorparserStk`
	(EmperorparserAbsSyn22  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn27  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (With emperorparser_var_2 emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_39 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_39 = emperorparserReduce 5# 18# emperorparserReduction_39
emperorparserReduction_39 (_ `EmperorparserStk`
	(EmperorparserAbsSyn24  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn32  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn23
		 (Switch emperorparser_var_2 emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_40 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_40 = emperorparserSpecReduce_0  19# emperorparserReduction_40
emperorparserReduction_40  =  EmperorparserAbsSyn24
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_41 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_41 = emperorparserSpecReduce_3  19# emperorparserReduction_41
emperorparserReduction_41 (EmperorparserAbsSyn24  emperorparser_var_3)
	_
	(EmperorparserAbsSyn25  emperorparser_var_1)
	 =  EmperorparserAbsSyn24
		 (emperorparser_var_1 : emperorparser_var_3
	)
emperorparserReduction_41 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_42 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_42 = emperorparserSpecReduce_3  20# emperorparserReduction_42
emperorparserReduction_42 (EmperorparserAbsSyn23  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn25
		 (SwitchCase emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_42 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_43 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_43 = emperorparserSpecReduce_1  21# emperorparserReduction_43
emperorparserReduction_43 (EmperorparserAbsSyn27  emperorparser_var_1)
	 =  EmperorparserAbsSyn26
		 (AssignmentC emperorparser_var_1
	)
emperorparserReduction_43 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_44 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_44 = emperorparserSpecReduce_1  21# emperorparserReduction_44
emperorparserReduction_44 (EmperorparserAbsSyn28  emperorparser_var_1)
	 =  EmperorparserAbsSyn26
		 (QueueC emperorparser_var_1
	)
emperorparserReduction_44 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_45 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_45 = emperorparserSpecReduce_1  21# emperorparserReduction_45
emperorparserReduction_45 (EmperorparserAbsSyn34  emperorparser_var_1)
	 =  EmperorparserAbsSyn26
		 (CallC emperorparser_var_1
	)
emperorparserReduction_45 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_46 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_46 = emperorparserSpecReduce_2  21# emperorparserReduction_46
emperorparserReduction_46 (EmperorparserAbsSyn39  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn26
		 (Return emperorparser_var_2
	)
emperorparserReduction_46 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_47 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_47 = emperorparserReduce 4# 22# emperorparserReduction_47
emperorparserReduction_47 ((EmperorparserAbsSyn32  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	(EmperorparserAbsSyn41  emperorparser_var_1) `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn27
		 (Assignment emperorparser_var_1 (Ident (identifierVal emperorparser_var_2)) emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_48 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_48 = emperorparserReduce 4# 23# emperorparserReduction_48
emperorparserReduction_48 ((EmperorparserAbsSyn32  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	(EmperorparserAbsSyn41  emperorparser_var_1) `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn28
		 (Queue emperorparser_var_1 (Ident (identifierVal emperorparser_var_2)) emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_49 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_49 = emperorparserSpecReduce_1  24# emperorparserReduction_49
emperorparserReduction_49 (EmperorparserAbsSyn30  emperorparser_var_1)
	 =  EmperorparserAbsSyn29
		 (resolveTuple emperorparser_var_1
	)
emperorparserReduction_49 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_50 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_50 = emperorparserSpecReduce_1  25# emperorparserReduction_50
emperorparserReduction_50 (EmperorparserAbsSyn29  emperorparser_var_1)
	 =  EmperorparserAbsSyn30
		 ([emperorparser_var_1]
	)
emperorparserReduction_50 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_51 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_51 = emperorparserSpecReduce_3  25# emperorparserReduction_51
emperorparserReduction_51 (EmperorparserAbsSyn30  emperorparser_var_3)
	_
	(EmperorparserAbsSyn29  emperorparser_var_1)
	 =  EmperorparserAbsSyn30
		 (emperorparser_var_1 : emperorparser_var_3
	)
emperorparserReduction_51 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_52 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_52 = emperorparserSpecReduce_1  26# emperorparserReduction_52
emperorparserReduction_52 _
	 =  EmperorparserAbsSyn29
		 (IntP
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_53 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_53 = emperorparserSpecReduce_1  26# emperorparserReduction_53
emperorparserReduction_53 _
	 =  EmperorparserAbsSyn29
		 (BoolP
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_54 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_54 = emperorparserSpecReduce_1  26# emperorparserReduction_54
emperorparserReduction_54 _
	 =  EmperorparserAbsSyn29
		 (RealP
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_55 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_55 = emperorparserSpecReduce_1  26# emperorparserReduction_55
emperorparserReduction_55 _
	 =  EmperorparserAbsSyn29
		 (CharP
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_56 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_56 = emperorparserSpecReduce_1  26# emperorparserReduction_56
emperorparserReduction_56 _
	 =  EmperorparserAbsSyn29
		 (EList CharP
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_57 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_57 = emperorparserSpecReduce_1  26# emperorparserReduction_57
emperorparserReduction_57 _
	 =  EmperorparserAbsSyn29
		 (Unit
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_58 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_58 = emperorparserSpecReduce_1  26# emperorparserReduction_58
emperorparserReduction_58 _
	 =  EmperorparserAbsSyn29
		 (Any
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_59 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_59 = emperorparserSpecReduce_3  26# emperorparserReduction_59
emperorparserReduction_59 _
	(EmperorparserAbsSyn29  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn29
		 (emperorparser_var_2
	)
emperorparserReduction_59 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_60 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_60 = emperorparserSpecReduce_3  26# emperorparserReduction_60
emperorparserReduction_60 (EmperorparserAbsSyn29  emperorparser_var_3)
	_
	(EmperorparserAbsSyn29  emperorparser_var_1)
	 =  EmperorparserAbsSyn29
		 (EFunction Pure emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_60 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_61 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_61 = emperorparserReduce 4# 26# emperorparserReduction_61
emperorparserReduction_61 ((EmperorparserAbsSyn29  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserAbsSyn29  emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn29
		 (EFunction Impure emperorparser_var_2 emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_62 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_62 = emperorparserSpecReduce_3  26# emperorparserReduction_62
emperorparserReduction_62 _
	(EmperorparserAbsSyn29  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn29
		 (EList emperorparser_var_2
	)
emperorparserReduction_62 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_63 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_63 = emperorparserSpecReduce_3  26# emperorparserReduction_63
emperorparserReduction_63 _
	(EmperorparserAbsSyn29  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn29
		 (ESet emperorparser_var_2
	)
emperorparserReduction_63 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_64 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_64 = emperorparserSpecReduce_1  27# emperorparserReduction_64
emperorparserReduction_64 (EmperorparserAbsSyn33  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Value emperorparser_var_1
	)
emperorparserReduction_64 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_65 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_65 = emperorparserSpecReduce_2  27# emperorparserReduction_65
emperorparserReduction_65 (EmperorparserAbsSyn32  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn32
		 (Not emperorparser_var_2
	)
emperorparserReduction_65 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_66 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_66 = emperorparserSpecReduce_2  27# emperorparserReduction_66
emperorparserReduction_66 (EmperorparserAbsSyn32  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn32
		 (Neg emperorparser_var_2
	)
emperorparserReduction_66 _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_67 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_67 = emperorparserSpecReduce_3  27# emperorparserReduction_67
emperorparserReduction_67 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Add emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_67 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_68 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_68 = emperorparserSpecReduce_3  27# emperorparserReduction_68
emperorparserReduction_68 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Subtract emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_68 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_69 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_69 = emperorparserSpecReduce_3  27# emperorparserReduction_69
emperorparserReduction_69 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Multiply emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_69 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_70 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_70 = emperorparserSpecReduce_3  27# emperorparserReduction_70
emperorparserReduction_70 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Divide emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_70 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_71 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_71 = emperorparserSpecReduce_3  27# emperorparserReduction_71
emperorparserReduction_71 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Modulo emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_71 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_72 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_72 = emperorparserSpecReduce_3  27# emperorparserReduction_72
emperorparserReduction_72 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Less emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_72 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_73 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_73 = emperorparserSpecReduce_3  27# emperorparserReduction_73
emperorparserReduction_73 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (LessOrEqual emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_73 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_74 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_74 = emperorparserSpecReduce_3  27# emperorparserReduction_74
emperorparserReduction_74 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Greater emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_74 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_75 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_75 = emperorparserSpecReduce_3  27# emperorparserReduction_75
emperorparserReduction_75 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (GreaterOrEqual emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_75 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_76 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_76 = emperorparserSpecReduce_3  27# emperorparserReduction_76
emperorparserReduction_76 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Equal emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_76 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_77 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_77 = emperorparserSpecReduce_3  27# emperorparserReduction_77
emperorparserReduction_77 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (NotEqual emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_77 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_78 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_78 = emperorparserSpecReduce_3  27# emperorparserReduction_78
emperorparserReduction_78 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (AndStrict emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_78 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_79 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_79 = emperorparserSpecReduce_3  27# emperorparserReduction_79
emperorparserReduction_79 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (AndLazy emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_79 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_80 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_80 = emperorparserSpecReduce_3  27# emperorparserReduction_80
emperorparserReduction_80 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (OrStrict emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_80 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_81 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_81 = emperorparserSpecReduce_3  27# emperorparserReduction_81
emperorparserReduction_81 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (OrLazy emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_81 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_82 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_82 = emperorparserSpecReduce_3  27# emperorparserReduction_82
emperorparserReduction_82 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Implies emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_82 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_83 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_83 = emperorparserSpecReduce_3  27# emperorparserReduction_83
emperorparserReduction_83 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (Xor emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_83 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_84 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_84 = emperorparserSpecReduce_3  27# emperorparserReduction_84
emperorparserReduction_84 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (ShiftLeft emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_84 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_85 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_85 = emperorparserSpecReduce_3  27# emperorparserReduction_85
emperorparserReduction_85 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (ShiftRight emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_85 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_86 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_86 = emperorparserSpecReduce_3  27# emperorparserReduction_86
emperorparserReduction_86 (EmperorparserAbsSyn32  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn32
		 (ShiftRightSameSign emperorparser_var_1 emperorparser_var_3
	)
emperorparserReduction_86 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_87 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_87 = emperorparserSpecReduce_3  27# emperorparserReduction_87
emperorparserReduction_87 _
	(EmperorparserAbsSyn37  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn32
		 (Set emperorparser_var_2
	)
emperorparserReduction_87 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_88 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_88 = emperorparserSpecReduce_3  27# emperorparserReduction_88
emperorparserReduction_88 _
	(EmperorparserAbsSyn37  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn32
		 (Tuple emperorparser_var_2
	)
emperorparserReduction_88 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_89 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_89 = emperorparserSpecReduce_3  27# emperorparserReduction_89
emperorparserReduction_89 _
	(EmperorparserAbsSyn37  emperorparser_var_2)
	_
	 =  EmperorparserAbsSyn32
		 (List emperorparser_var_2
	)
emperorparserReduction_89 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_90 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_90 = emperorparserSpecReduce_1  28# emperorparserReduction_90
emperorparserReduction_90 _
	 =  EmperorparserAbsSyn33
		 (IDC
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_91 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_91 = emperorparserSpecReduce_1  28# emperorparserReduction_91
emperorparserReduction_91 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (Integer (intVal emperorparser_var_1)
	)
emperorparserReduction_91 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_92 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_92 = emperorparserSpecReduce_1  28# emperorparserReduction_92
emperorparserReduction_92 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (Real (realVal emperorparser_var_1)
	)
emperorparserReduction_92 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_93 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_93 = emperorparserSpecReduce_1  28# emperorparserReduction_93
emperorparserReduction_93 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (IdentV (Ident (identifierVal emperorparser_var_1))
	)
emperorparserReduction_93 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_94 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_94 = emperorparserSpecReduce_1  28# emperorparserReduction_94
emperorparserReduction_94 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (Char (charVal emperorparser_var_1)
	)
emperorparserReduction_94 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_95 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_95 = emperorparserSpecReduce_1  28# emperorparserReduction_95
emperorparserReduction_95 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (Bool (isTrue emperorparser_var_1)
	)
emperorparserReduction_95 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_96 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_96 = emperorparserSpecReduce_1  28# emperorparserReduction_96
emperorparserReduction_96 (EmperorparserTerminal emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (StringV (stringVal emperorparser_var_1)
	)
emperorparserReduction_96 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_97 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_97 = emperorparserSpecReduce_1  28# emperorparserReduction_97
emperorparserReduction_97 (EmperorparserAbsSyn34  emperorparser_var_1)
	 =  EmperorparserAbsSyn33
		 (CallV emperorparser_var_1
	)
emperorparserReduction_97 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_98 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_98 = emperorparserSpecReduce_1  29# emperorparserReduction_98
emperorparserReduction_98 (EmperorparserAbsSyn34  emperorparser_var_1)
	 =  EmperorparserAbsSyn34
		 (emperorparser_var_1
	)
emperorparserReduction_98 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_99 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_99 = emperorparserSpecReduce_1  29# emperorparserReduction_99
emperorparserReduction_99 (EmperorparserAbsSyn34  emperorparser_var_1)
	 =  EmperorparserAbsSyn34
		 (emperorparser_var_1
	)
emperorparserReduction_99 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_100 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_100 = emperorparserReduce 5# 30# emperorparserReduction_100
emperorparserReduction_100 (_ `EmperorparserStk`
	(EmperorparserAbsSyn37  emperorparser_var_4) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_2) `EmperorparserStk`
	_ `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn34
		 (Call Impure (Ident (identifierVal emperorparser_var_2)) emperorparser_var_4
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_101 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_101 = emperorparserReduce 4# 31# emperorparserReduction_101
emperorparserReduction_101 (_ `EmperorparserStk`
	(EmperorparserAbsSyn37  emperorparser_var_3) `EmperorparserStk`
	_ `EmperorparserStk`
	(EmperorparserTerminal emperorparser_var_1) `EmperorparserStk`
	emperorparserRest)
	 = EmperorparserAbsSyn34
		 (Call Pure (Ident (identifierVal emperorparser_var_1)) emperorparser_var_3
	) `EmperorparserStk` emperorparserRest

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_102 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_102 = emperorparserSpecReduce_0  32# emperorparserReduction_102
emperorparserReduction_102  =  EmperorparserAbsSyn37
		 ([]
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_103 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_103 = emperorparserSpecReduce_1  32# emperorparserReduction_103
emperorparserReduction_103 (EmperorparserAbsSyn37  emperorparser_var_1)
	 =  EmperorparserAbsSyn37
		 (emperorparser_var_1
	)
emperorparserReduction_103 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_104 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_104 = emperorparserSpecReduce_1  33# emperorparserReduction_104
emperorparserReduction_104 (EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn37
		 ([emperorparser_var_1]
	)
emperorparserReduction_104 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_105 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_105 = emperorparserSpecReduce_3  33# emperorparserReduction_105
emperorparserReduction_105 (EmperorparserAbsSyn37  emperorparser_var_3)
	_
	(EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn37
		 (emperorparser_var_1 : emperorparser_var_3
	)
emperorparserReduction_105 _ _ _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_106 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_106 = emperorparserSpecReduce_0  34# emperorparserReduction_106
emperorparserReduction_106  =  EmperorparserAbsSyn39
		 (Nothing
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_107 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_107 = emperorparserSpecReduce_1  34# emperorparserReduction_107
emperorparserReduction_107 (EmperorparserAbsSyn32  emperorparser_var_1)
	 =  EmperorparserAbsSyn39
		 (Just emperorparser_var_1
	)
emperorparserReduction_107 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_108 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_108 = emperorparserSpecReduce_0  35# emperorparserReduction_108
emperorparserReduction_108  =  EmperorparserAbsSyn40
		 (Nothing
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_109 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_109 = emperorparserSpecReduce_1  35# emperorparserReduction_109
emperorparserReduction_109 (EmperorparserAbsSyn20  emperorparser_var_1)
	 =  EmperorparserAbsSyn40
		 (Just emperorparser_var_1
	)
emperorparserReduction_109 _  = notEmperorparserAtAll 

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_110 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_110 = emperorparserSpecReduce_0  36# emperorparserReduction_110
emperorparserReduction_110  =  EmperorparserAbsSyn41
		 (Nothing
	)

#if __GLASGOW_HASKELL__ >= 710
emperorparserReduce_111 :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)
#endif
emperorparserReduce_111 = emperorparserSpecReduce_1  36# emperorparserReduction_111
emperorparserReduction_111 (EmperorparserAbsSyn29  emperorparser_var_1)
	 =  EmperorparserAbsSyn41
		 (Just emperorparser_var_1
	)
emperorparserReduction_111 _  = notEmperorparserAtAll 

emperorparserNewToken action sts stk
	= lexWrap(\tk -> 
	let cont i = emperorparserDoAction i tk action sts stk in
	case tk of {
	TEoF -> emperorparserDoAction 65# tk action sts stk;
	TInteger              intVal p -> cont 1#;
	TBool                 isTrue p -> cont 2#;
	TReal                 realVal p -> cont 3#;
	TChar                 charVal p -> cont 4#;
	TString               stringVal p -> cont 5#;
	TIf                   p -> cont 6#;
	TElse                 p -> cont 7#;
	TWhile                p -> cont 8#;
	TRepeat               p -> cont 9#;
	TWith                 p -> cont 10#;
	TSwitch               p -> cont 11#;
	TFor                  p -> cont 12#;
	TImport               p -> cont 13#;
	TModule               p -> cont 14#;
	TIdent                identifierVal p -> cont 15#;
	TQueue                p -> cont 16#;
	TGoesTo               p -> cont 17#;
	TGets                 p -> cont 18#;
	TLParenth             p -> cont 19#;
	TRParenth             p -> cont 20#;
	TLBracket             p -> cont 21#;
	TRBracket             p -> cont 22#;
	TLBrace               p -> cont 23#;
	TRBrace               p -> cont 24#;
	TPlus                 p -> cont 25#;
	TMinus                p -> cont 26#;
	TDivide               p -> cont 27#;
	TModulo               p -> cont 28#;
	TTimes                p -> cont 29#;
	TShiftLeft            p -> cont 30#;
	TShiftRight           p -> cont 31#;
	TShiftRightSameSign   p -> cont 32#;
	TAndScrict            p -> cont 33#;
	TAndLazy              p -> cont 34#;
	TOrStrict             p -> cont 35#;
	TOrLazy               p -> cont 36#;
	TNot                  p -> cont 37#;
	TXor                  p -> cont 38#;
	TLessThan             p -> cont 39#;
	TLessThanOrEqual      p -> cont 40#;
	TGreaterThan          p -> cont 41#;
	TGreaterThanOrEqual   p -> cont 42#;
	TImplies              p -> cont 43#;
	TEqual                p -> cont 44#;
	TNotEqual             p -> cont 45#;
	TImpure               p -> cont 46#;
	TComma                p -> cont 47#;
	TColon                p -> cont 48#;
	TPartSeparator        p -> cont 49#;
	TIntT                 p -> cont 50#;
	TBoolT                p -> cont 51#;
	TRealT                p -> cont 52#;
	TCharT                p -> cont 53#;
	TStringT              p -> cont 54#;
	TUnit                 p -> cont 55#;
	TAnyT                 p -> cont 56#;
	TIsSubType            p -> cont 57#;
	TIsImplementeBy       p -> cont 58#;
	TIsType               p -> cont 59#;
	TClass                p -> cont 60#;
	TComponent            p -> cont 61#;
	TBlockSeparator       p -> cont 62#;
	TIDC                  p -> cont 63#;
	TReturn               p -> cont 64#;
	_ -> emperorparserError' (tk, [])
	})

emperorparserError_ explist 65# tk = emperorparserError' (tk, explist)
emperorparserError_ explist _ tk = emperorparserError' (tk, explist)

emperorparserThen :: () => Alex a -> (a -> Alex b) -> Alex b
emperorparserThen = (>>=)
emperorparserReturn :: () => a -> Alex a
emperorparserReturn = (return)
#if __GLASGOW_HASKELL__ >= 710
emperorparserParse :: () => Emperorparser_GHC_Exts.Int# -> Alex (EmperorparserAbsSyn _ _ _)

emperorparserNewToken :: () => Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)

emperorparserDoAction :: () => Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _)

emperorparserReduceArr :: () => Emperorparser_Data_Array.Array Int (Emperorparser_GHC_Exts.Int# -> Token -> Emperorparser_GHC_Exts.Int# -> Emperorparser_IntList -> EmperorparserStk (EmperorparserAbsSyn _ _ _) -> Alex (EmperorparserAbsSyn _ _ _))

#endif
emperorparserThen1 :: () => Alex a -> (a -> Alex b) -> Alex b
emperorparserThen1 = emperorparserThen
emperorparserReturn1 :: () => a -> Alex a
emperorparserReturn1 = emperorparserReturn
emperorparserError' :: () => ((Token), [String]) -> Alex a
emperorparserError' tk = (\(tokens, _) -> parseError tokens) tk
-- | Run the emperor parser
parseEmperor = emperorparserSomeParser where
 emperorparserSomeParser = emperorparserThen (emperorparserParse 0#) (\x -> case x of {EmperorparserAbsSyn5 z -> emperorparserReturn z; _other -> notEmperorparserAtAll })

-- | Run the parser for REPL lines
parseREPL = emperorparserSomeParser where
 emperorparserSomeParser = emperorparserThen (emperorparserParse 1#) (\x -> case x of {EmperorparserAbsSyn12 z -> emperorparserReturn z; _other -> notEmperorparserAtAll })

emperorparserSeq = emperorparserDontSeq


parseError :: Token -> Alex a
parseError t = case t of
    TEoF -> alexError $ "Unexpected EoF"
    t' -> case position t' of
        AlexPn _ l c -> alexError $ show l ++ ":" ++ show c ++ ": " ++ "Parse error on " ++ show t

resolveTuple :: [EmperorType] -> EmperorType
resolveTuple [] = error "The impossible has happened, you seem to have an expression with no type, not even the unit?"
resolveTuple [t] = t
resolveTuple ts = ETuple ts
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 10 "<command-line>" #-}
# 1 "/usr/include/stdc-predef.h" 1 3 4

# 17 "/usr/include/stdc-predef.h" 3 4














































{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "/usr/lib/ghc/include/ghcversion.h" #-}

















{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "/tmp/ghc7b38_0/ghc_2.h" #-}




























































































































































{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 













-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Emperorparser_GHC_Exts.tagToEnum# (n Emperorparser_GHC_Exts.<# m)) :: Bool)
#define GTE(n,m) ((Emperorparser_GHC_Exts.tagToEnum# (n Emperorparser_GHC_Exts.>=# m)) :: Bool)
#define EQ(n,m) ((Emperorparser_GHC_Exts.tagToEnum# (n Emperorparser_GHC_Exts.==# m)) :: Bool)
#else
#define LT(n,m) (n Emperorparser_GHC_Exts.<# m)
#define GTE(n,m) (n Emperorparser_GHC_Exts.>=# m)
#define EQ(n,m) (n Emperorparser_GHC_Exts.==# m)
#endif
{-# LINE 43 "templates/GenericTemplate.hs" #-}

data Emperorparser_IntList = EmperorparserCons Emperorparser_GHC_Exts.Int# Emperorparser_IntList







{-# LINE 65 "templates/GenericTemplate.hs" #-}

{-# LINE 75 "templates/GenericTemplate.hs" #-}

{-# LINE 84 "templates/GenericTemplate.hs" #-}

infixr 9 `EmperorparserStk`
data EmperorparserStk a = EmperorparserStk a (EmperorparserStk a)

-----------------------------------------------------------------------------
-- starting the parse

emperorparserParse start_state = emperorparserNewToken start_state notEmperorparserAtAll notEmperorparserAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is 0#, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
emperorparserAccept 0# tk st sts (_ `EmperorparserStk` ans `EmperorparserStk` _) =
        emperorparserReturn1 ans
emperorparserAccept j tk st sts (EmperorparserStk ans _) = 
        (emperorparserTcHack j (emperorparserTcHack st)) (emperorparserReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



emperorparserDoAction i tk st
        = {- nothing -}


          case action of
                0#           -> {- nothing -}
                                     emperorparserFail (emperorparserExpListPerState ((Emperorparser_GHC_Exts.I# (st)) :: Int)) i tk st
                -1#          -> {- nothing -}
                                     emperorparserAccept i tk st
                n | LT(n,(0# :: Emperorparser_GHC_Exts.Int#)) -> {- nothing -}

                                                   (emperorparserReduceArr Emperorparser_Data_Array.! rule) i tk st
                                                   where rule = (Emperorparser_GHC_Exts.I# ((Emperorparser_GHC_Exts.negateInt# ((n Emperorparser_GHC_Exts.+# (1# :: Emperorparser_GHC_Exts.Int#))))))
                n                 -> {- nothing -}


                                     emperorparserShift new_state i tk st
                                     where new_state = (n Emperorparser_GHC_Exts.-# (1# :: Emperorparser_GHC_Exts.Int#))
   where off    = emperorparserAdjustOffset (indexShortOffAddr emperorparserActOffsets st)
         off_i  = (off Emperorparser_GHC_Exts.+#  i)
         check  = if GTE(off_i,(0# :: Emperorparser_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr emperorparserCheck off_i, i)
                  else False
         action
          | check     = indexShortOffAddr emperorparserTable off_i
          | otherwise = indexShortOffAddr emperorparserDefActions st




indexShortOffAddr (EmperorparserA# arr) off =
        Emperorparser_GHC_Exts.narrow16Int# i
  where
        i = Emperorparser_GHC_Exts.word2Int# (Emperorparser_GHC_Exts.or# (Emperorparser_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Emperorparser_GHC_Exts.int2Word# (Emperorparser_GHC_Exts.ord# (Emperorparser_GHC_Exts.indexCharOffAddr# arr (off' Emperorparser_GHC_Exts.+# 1#)))
        low  = Emperorparser_GHC_Exts.int2Word# (Emperorparser_GHC_Exts.ord# (Emperorparser_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Emperorparser_GHC_Exts.*# 2#




{-# INLINE emperorparserLt #-}
emperorparserLt x y = LT(x,y)


readArrayBit arr bit =
    Bits.testBit (Emperorparser_GHC_Exts.I# (indexShortOffAddr arr ((unbox_int bit) `Emperorparser_GHC_Exts.iShiftRA#` 4#))) (bit `mod` 16)
  where unbox_int (Emperorparser_GHC_Exts.I# x) = x






data EmperorparserAddr = EmperorparserA# Emperorparser_GHC_Exts.Addr#


-----------------------------------------------------------------------------
-- EmperorparserState data type (not arrays)

{-# LINE 180 "templates/GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

emperorparserShift new_state 0# tk st sts stk@(x `EmperorparserStk` _) =
     let i = (case x of { EmperorparserErrorToken (Emperorparser_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     emperorparserDoAction i tk new_state (EmperorparserCons (st) (sts)) (stk)

emperorparserShift new_state i tk st sts stk =
     emperorparserNewToken new_state (EmperorparserCons (st) (sts)) ((EmperorparserTerminal (tk))`EmperorparserStk`stk)

-- emperorparserReduce is specialised for the common cases.

emperorparserSpecReduce_0 i fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserSpecReduce_0 nt fn j tk st@((action)) sts stk
     = emperorparserGoto nt j tk st (EmperorparserCons (st) (sts)) (fn `EmperorparserStk` stk)

emperorparserSpecReduce_1 i fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserSpecReduce_1 nt fn j tk _ sts@((EmperorparserCons (st@(action)) (_))) (v1`EmperorparserStk`stk')
     = let r = fn v1 in
       emperorparserSeq r (emperorparserGoto nt j tk st sts (r `EmperorparserStk` stk'))

emperorparserSpecReduce_2 i fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserSpecReduce_2 nt fn j tk _ (EmperorparserCons (_) (sts@((EmperorparserCons (st@(action)) (_))))) (v1`EmperorparserStk`v2`EmperorparserStk`stk')
     = let r = fn v1 v2 in
       emperorparserSeq r (emperorparserGoto nt j tk st sts (r `EmperorparserStk` stk'))

emperorparserSpecReduce_3 i fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserSpecReduce_3 nt fn j tk _ (EmperorparserCons (_) ((EmperorparserCons (_) (sts@((EmperorparserCons (st@(action)) (_))))))) (v1`EmperorparserStk`v2`EmperorparserStk`v3`EmperorparserStk`stk')
     = let r = fn v1 v2 v3 in
       emperorparserSeq r (emperorparserGoto nt j tk st sts (r `EmperorparserStk` stk'))

emperorparserReduce k i fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserReduce k nt fn j tk st sts stk
     = case emperorparserDrop (k Emperorparser_GHC_Exts.-# (1# :: Emperorparser_GHC_Exts.Int#)) sts of
         sts1@((EmperorparserCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                emperorparserDoSeq r (emperorparserGoto nt j tk st1 sts1 r)

emperorparserMonadReduce k nt fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserMonadReduce k nt fn j tk st sts stk =
      case emperorparserDrop k (EmperorparserCons (st) (sts)) of
        sts1@((EmperorparserCons (st1@(action)) (_))) ->
          let drop_stk = emperorparserDropStk k stk in
          emperorparserThen1 (fn stk tk) (\r -> emperorparserGoto nt j tk st1 sts1 (r `EmperorparserStk` drop_stk))

emperorparserMonad2Reduce k nt fn 0# tk st sts stk
     = emperorparserFail [] 0# tk st sts stk
emperorparserMonad2Reduce k nt fn j tk st sts stk =
      case emperorparserDrop k (EmperorparserCons (st) (sts)) of
        sts1@((EmperorparserCons (st1@(action)) (_))) ->
         let drop_stk = emperorparserDropStk k stk

             off = emperorparserAdjustOffset (indexShortOffAddr emperorparserGotoOffsets st1)
             off_i = (off Emperorparser_GHC_Exts.+#  nt)
             new_state = indexShortOffAddr emperorparserTable off_i




          in
          emperorparserThen1 (fn stk tk) (\r -> emperorparserNewToken new_state sts1 (r `EmperorparserStk` drop_stk))

emperorparserDrop 0# l = l
emperorparserDrop n (EmperorparserCons (_) (t)) = emperorparserDrop (n Emperorparser_GHC_Exts.-# (1# :: Emperorparser_GHC_Exts.Int#)) t

emperorparserDropStk 0# l = l
emperorparserDropStk n (x `EmperorparserStk` xs) = emperorparserDropStk (n Emperorparser_GHC_Exts.-# (1#::Emperorparser_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


emperorparserGoto nt j tk st = 
   {- nothing -}
   emperorparserDoAction j tk new_state
   where off = emperorparserAdjustOffset (indexShortOffAddr emperorparserGotoOffsets st)
         off_i = (off Emperorparser_GHC_Exts.+#  nt)
         new_state = indexShortOffAddr emperorparserTable off_i




-----------------------------------------------------------------------------
-- Error recovery (0# is the error token)

-- parse error if we are in recovery and we fail again
emperorparserFail explist 0# tk old_st _ stk@(x `EmperorparserStk` _) =
     let i = (case x of { EmperorparserErrorToken (Emperorparser_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        emperorparserError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
emperorparserFail  0# tk old_st (EmperorparserCons ((action)) (sts)) 
                                                (saved_tok `EmperorparserStk` _ `EmperorparserStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        emperorparserDoAction 0# tk action sts ((saved_tok`EmperorparserStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
emperorparserFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        emperorparserDoAction 0# tk action sts ( (EmperorparserErrorToken (Emperorparser_GHC_Exts.I# (i))) `EmperorparserStk` stk)

-- Internal emperorparser errors:

notEmperorparserAtAll :: a
notEmperorparserAtAll = error "Internal Emperorparser error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


emperorparserTcHack :: Emperorparser_GHC_Exts.Int# -> a -> a
emperorparserTcHack x y = y
{-# INLINE emperorparserTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Emperorparser emits 
--      emperorparserSeq = emperorparserDoSeq
-- otherwise it emits
--      emperorparserSeq = emperorparserDontSeq

emperorparserDoSeq, emperorparserDontSeq :: a -> b -> b
emperorparserDoSeq   a b = a `seq` b
emperorparserDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline emperorparserGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE emperorparserDoAction #-}
{-# NOINLINE emperorparserTable #-}
{-# NOINLINE emperorparserCheck #-}
{-# NOINLINE emperorparserActOffsets #-}
{-# NOINLINE emperorparserGotoOffsets #-}
{-# NOINLINE emperorparserDefActions #-}

{-# NOINLINE emperorparserShift #-}
{-# NOINLINE emperorparserSpecReduce_0 #-}
{-# NOINLINE emperorparserSpecReduce_1 #-}
{-# NOINLINE emperorparserSpecReduce_2 #-}
{-# NOINLINE emperorparserSpecReduce_3 #-}
{-# NOINLINE emperorparserReduce #-}
{-# NOINLINE emperorparserMonadReduce #-}
{-# NOINLINE emperorparserGoto #-}
{-# NOINLINE emperorparserFail #-}

-- end of Emperorparser Template.
